# Инициализация параметров
INT width = 5
INT height = 5

ARRAY grid = [
  0, 1, 0, 0, 1,
  1, 0, 0, 1, 0,
  0, 1, 0, 0, 0,
  0, 0, 1, 1, 0,
  1, 0, 0, 0, 1
]

ARRAY new_grid = [
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0
]

INT generation = 0

::label_start::
# Очистка экрана (bash, sh)
PRINT "\027\091\072\027\091\050\074\027\091\051\074"

# Печатаем текущее поколение
PRINTL "Generation: "
PRINTL generation

INT y = 0
::label_y_loop::
IF y < height THEN
  INT x = 0
  ::label_x_loop::
  IF x < width THEN
    INT index = x + y * width
    PRINT grid[index]
    PRINT " "
    x = x + 1
    GOTO label_x_loop
  ENDIF
  PRINTL "" # Перенос строки после каждой строки сетки
  y = y + 1
  GOTO label_y_loop
ENDIF

# Рассчитываем новое поколение
INT y = 0
::label_process_y::
IF y < height THEN
  INT x = 0
  ::label_process_x::
  IF x < width THEN
    INT count_neighbors = 0

    # Соседи
    IF x > 0 AND y > 0 THEN
      INT new_y = y - 1
      INT index = x - 1 + new_y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    IF y > 0 THEN
      INT new_y = y - 1
      INT index = x + new_y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    INT width_minus_1 = width - 1
    IF x < width_minus_1 AND y > 0 THEN
      INT new_y = y - 1
      INT index = x + 1 + new_y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    IF x > 0 THEN
      INT index = x - 1 + y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    INT width_minus_1 = width - 1
    IF x < width_minus_1 THEN
      INT index = x + 1 + y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    INT height_minus_1 = height - 1
    IF x > 0 AND y < height_minus_1 THEN
      INT new_y = y - 1
      INT index = x - 1 + new_y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    INT height_minus_1 = height - 1
    IF y < height_minus_1 THEN
      INT new_y = y - 1
      INT index = x + new_y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF
    INT height_minus_1 = height - 1
    INT width_minus_1 = width - 1
    IF x < width_minus_1 AND y < height_minus_1 THEN
      INT new_y = y - 1
      INT index = x + 1 + new_y * width
      count_neighbors = count_neighbors + grid[index]
    ENDIF

    # Определяем индекс текущей клетки
    INT index = x + y * width

    # Применяем правила игры "Жизнь"
    IF grid[index] == 1 THEN
      IF count_neighbors < 2 OR count_neighbors > 3 THEN
        new_grid[index] = 0 # Клетка умирает
      ENDIF
    ENDIF
    IF grid[index] == 0 AND count_neighbors == 3 THEN
      new_grid[index] = 1 # Новая клетка рождается
    ENDIF
    IF grid[index] == 1 THEN
      IF count_neighbors == 2 OR count_neighbors == 3 THEN
        new_grid[index] = 1 # Клетка остаётся живой
      ENDIF
    ENDIF

    x = x + 1
    GOTO label_process_x
  ENDIF
  y = y + 1
  GOTO label_process_y
ENDIF

# Копируем new_grid обратно в grid
INT i = 0
::label_copy_grid::
INT width_mul_height = width * height
IF i < width_mul_height THEN
  grid[i] = new_grid[i]
  i = i + 1
  GOTO label_copy_grid
ENDIF

# Следующее поколение
generation = generation + 1
GOTO label_start
